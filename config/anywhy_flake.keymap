#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

&gresc { mods = <(MOD_LALT|MOD_RALT)>; };

/ {
    combos {
        compatible = "zmk,combos";

        caps_word_trigger {
            bindings = <&caps_word>;
            key-positions = <16 19>;
            layers = <0>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 20>;
            timeout-ms = <20>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        lto_sym {
            bindings = <&mo 3>;
            key-positions = <28 27>;
            timeout-ms = <20>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        rto_sym {
            bindings = <&mo 3>;
            key-positions = <31 32>;
            timeout-ms = <20>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW";
        };

        eqeq: eqeq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            label = "EQEQ";
        };

        mac_logout: mac_logout {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(Q))>;
            label = "MAC_LOGOUT";
        };

        mac_copy: mac_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>;
            label = "MAC_COPY";
        };

        mac_paste: mac_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>;
            label = "MAC_PASTE";
        };

        macos_cut: macos_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X)>;
            label = "MACOS_CUT";
        };

        mac_undo: mac_undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>;
            label = "MAC_UNDO";
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46>;
            require-prior-idle-ms = <100>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <13 14 15 16 25 26 27 28 37 38 39 40 17 29 41>;
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
        };

        ltl: ltl {
            compatible = "zmk,behavior-hold-tap";
            label = "LTL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <18 18 19 20 21 22 30 31 32 33 34 42 43 44 45 46>;
            require-prior-idle-ms = <100>;
        };

        ltr: ltr {
            compatible = "zmk,behavior-hold-tap";
            label = "LTR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <13 14 15 16 25 26 27 28 37 38 39 40 17 29 41>;
            hold-trigger-on-release;
            require-prior-idle-ms = <100>;
        };

        slash_semicolon: slash_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_SEMICOLON";
            bindings = <&kp SLASH>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        dot_underscore: dot_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_UNDERSCORE";
            bindings = <&kp PERIOD>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        comma_minus: comma_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MINUS";
            bindings = <&kp COMMA>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none       &none              &none                &none          &none            &none     &none        &none             &none         &none                 &none               &none
&kp ESC     &kp B              &kp L                &kp D          &kp W            &kp Q     &kp SQT      &kp F             &kp O         &kp U                 &kp J               &kp BSPC
&kp TAB     &hml LEFT_SHIFT N  &hml LEFT_CONTROL R  &ltl 3 T       &hml LEFT_GUI S  &kp G     &kp Y        &hmr RIGHT_GUI H  &ltr 3 A      &hmr RIGHT_CONTROL E  &hmr RIGHT_SHIFT I  &kp SEMICOLON
&caps_word  &kp V              &kp X                &kp M          &kp C            &kp Z     &kp K        &kp P             &comma_minus  &dot_underscore       &slash_semicolon    &kp ENTER
            &kp LEFT_CONTROL   &kp LALT             &kp SEMICOLON  &lt 1 SPACE      &gresc    &lt 4 ENTER  &lt 2 BACKSPACE   &kp MINUS     &kp LALT              &kp RIGHT_GUI
            >;
        };

        num {
            bindings = <
&none  &none           &none             &none         &none         &none         &none       &none            &none   &none   &none         &none
&none  &kp ESC         &kp BACKSPACE     &kp TAB       &kp ENTER     &kp DEL       &kp MINUS   &kp N7           &kp N8  &kp N9  &kp ASTERISK  &none
&none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &caps_word    &kp EQUAL   &kp N4           &kp N5  &kp N6  &kp N0        &none
&none  &mac_undo       &macos_cut        &mac_copy     &mac_paste    &arrow        &kp PERIOD  &kp N1           &kp N2  &kp N3  &kp SLASH     &none
       &trans          &trans            &trans        &trans        &none         &kp ENTER   &lt 2 BACKSPACE  &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
&none  &none                        &none                           &none                          &none                           &none              &none        &none       &none          &none         &none        &none
&none  &kp EQUAL                    &kp LESS_THAN                   &kp MINUS                      &kp GREATER_THAN                &kp EXCLAMATION    &kp PERCENT  &kp C_MUTE  &kp C_VOL_DN   &kp C_VOL_UP  &mac_logout  &none
&none  &mt LEFT_SHIFT LEFT_BRACKET  &mt LEFT_CONTROL RIGHT_BRACKET  &mt LEFT_ALT LEFT_PARENTHESIS  &mt LEFT_GUI RIGHT_PARENTHESIS  &kp HASH           &kp ASTRK    &kp LEFT    &kp DOWN       &kp UP_ARROW  &kp RIGHT    &none
&none  &kp AT                       &kp PIPE                        &kp UNDERSCORE                 &kp AMPS                        &kp DOLLAR         &kp TILDE    &kp HOME    &kp PAGE_DOWN  &kp PG_UP     &kp END      &none
       &trans                       &trans                          &trans                         &mt LEFT_SHIFT SPACE            &kp COLON          &none        &trans      &trans         &trans        &trans
            >;
        };

        sym {
            bindings = <
&none  &none            &none          &none             &none              &none          &none       &none                 &none                  &none          &none          &none
&none  &kp GRAVE        &kp LESS_THAN  &kp GREATER_THAN  &kp MINUS          &kp PIPE       &kp CARET   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPERSAND  &kp BACKSLASH  &none
&none  &kp EXCLAMATION  &kp ASTERISK   &kp SLASH         &kp EQUAL          &kp HASH       &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON  &kp UNDER      &none
&none  &kp AT_SIGN      &kp PLUS       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PERCENT    &kp TILDE   &kp COLON             &kp COMMA              &kp PERIOD     &kp QUESTION   &none
       &trans           &trans         &trans            &trans             &trans         &none       &none                 &trans                 &trans         &trans
            >;
        };

        controls {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt_clr_0  &bt_clr_1  &bt_clr_2  &bt_clr_3  &bt_clr_4         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt0       &bt1       &bt2       &bt3       &bt4              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &soft_off  &trans     &trans     &trans     &studio_unlock    &trans  &trans  &trans  &trans  &trans  &trans
        &trans     &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
